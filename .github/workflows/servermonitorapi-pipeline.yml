name: Server Monitor Api Pipeline

on:
  workflow_dispatch:
  push:
    paths:
      - "src/ServerPulse.Backend/ServerMonitorApi/**"
      - "test/ServerPulse.UnitTests/ServerPulse.Backend/ServerMonitorApiTests/**"
      - "test/ServerPulse.IntegrationTests/ServerMonitorApi.IntegrationTests/**"
  pull_request:
    paths:
      - "src/ServerPulse.Backend/ServerMonitorApi/**"
      - "test/ServerPulse.UnitTests/ServerPulse.Backend/ServerMonitorApiTests/**"
      - "test/ServerPulse.IntegrationTests/ServerMonitorApi.IntegrationTests/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

env:
  DOTNET_VERSION: "8.0.x"

jobs:
  run-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install coverage tools
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Build projects
        run: dotnet build src/ServerPulse.Backend/ServerMonitorApi/ServerMonitorApi.csproj --configuration Release --output ./output/servermonitor-api

      - name: Run unit tests with coverage
        run: |
          dotnet-coverage collect dotnet test test/ServerPulse.UnitTests/ServerPulse.Backend/ServerMonitorApiTests/ServerMonitorApiTests.csproj --configuration Release --logger "trx;LogFileName=unit-test-results.trx" --results-directory ./TestResults -f xml -o coverage.xml --settings coverage.runsettings

      - name: Run integration tests
        run: |
          dotnet test test/ServerPulse.IntegrationTests/ServerMonitorApi.IntegrationTests/ServerMonitorApi.IntegrationTests.csproj --configuration Release --logger "trx;LogFileName=integration-test-results.trx" --results-directory ./TestResults

      - name: Publish projects
        run: dotnet publish src/ServerPulse.Backend/ServerMonitorApi/ServerMonitorApi.csproj --configuration Release --output ./publish/servermonitor-api

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./TestResults

      - name: Upload code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: coverage.xml

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: validated-build
          path: ./output

      - name: Upload publish artifact
        uses: actions/upload-artifact@v4
        with:
          name: publish-build
          path: ./publish

  docker:
    needs: run-ci
    if: ${{ github.ref == 'refs/heads/develop-release' }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: ServerMonitorApi
            tag: tegto/serverpulse.servermonitorapi:dev
            file: ServerMonitorApi/Dockerfile
            configuration: Development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push ${{ matrix.service.name }}
        uses: docker/build-push-action@v6
        with:
          context: src/ServerPulse.Backend
          push: true
          tags: ${{ matrix.service.tag }}
          file: src/ServerPulse.Backend/${{ matrix.service.file }}
          build-args: |
            BUILD_CONFIGURATION=${{ matrix.service.configuration }}
