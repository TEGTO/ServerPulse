name: Continuous Integration Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop-release
    paths:
      - "src/ServerPulse.Backend/**"
      - "test/**"
  pull_request:
    branches:
      - main
      - develop-release
    paths:
      - "src/ServerPulse.Backend/**"
      - "test/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions: write-all

env:
  DOTNET_VERSION: "8.0.x"

jobs:
  run-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: |
          dotnet restore src/ServerPulse.Backend/ServerPulse.Backend.sln

      - name: Install coverage tools
        run: |
          dotnet tool install --global dotnet-coverage
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Build projects
        run: |
          dotnet build src/ServerPulse.Backend/ServerPulse.Backend.sln

      - name: Run tests with coverage
        run: |
          dotnet-coverage collect dotnet test src/ServerPulse.Backend/ServerPulse.Backend.sln --configuration Release --logger "trx;LogFileName=test-results.trx" --results-directory ./TestResults -f xml -o coverage.xml --settings coverage.runsettings

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ./TestResults

      - name: Upload code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: coverage.xml

      - name: Install ReportGenerator
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate HTML report from coverage
        run: |
          reportgenerator -reports:coverage.xml -targetdir:./coverage-report -reporttypes:Html

      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./coverage-report

      - name: Publish Individual Projects
        run: |
          dotnet publish src/ServerPulse.Backend/ServerSlotApi/ServerSlotApi.csproj --configuration Release --output ./output/server-slot-api
          dotnet publish src/ServerPulse.Backend/ServerMonitorApi/ServerMonitorApi.csproj --configuration Release --output ./output/server-monitor-api
          dotnet publish src/ServerPulse.Backend/AuthenticationApi/AuthenticationApi.csproj --configuration Release --output ./output/authentication-api
          dotnet publish src/ServerPulse.Backend/AnalyzerApi/AnalyzerApi.csproj --configuration Release --output ./output/analyzer-api
          dotnet publish src/ServerPulse.Backend/ApiGateway/ApiGateway.csproj --configuration Release --output ./output/apigateway

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: ./output

      - name: Trigger SonarCloud Workflow
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/continuous-integration-sonarcloud.yml/dispatches \
            -d '{"ref": "${{ github.ref_name }}"}'

  docker:
    needs: run-ci
    # if: ${{ github.ref == 'refs/heads/develop-release' }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          - name: ApiGateway
            tag: tegto/serverpulse.apigateway:dev
            file: ApiGateway/Dockerfile
            configuration: Development
          - name: AuthenticationApi
            tag: tegto/serverpulse.authenticationapi:dev
            file: AuthenticationApi/Dockerfile
            configuration: Development
          - name: AnalyzerApi
            tag: tegto/serverpulse.analyzerapi:dev
            file: AnalyzerApi/Dockerfile
            configuration: Development
          - name: ServerMonitorApi
            tag: tegto/serverpulse.servermonitorapi:dev
            file: ServerMonitorApi/Dockerfile
            configuration: Development
          - name: ServerSlotApi
            tag: tegto/serverpulse.serverslotapi:dev
            file: ServerSlotApi/Dockerfile
            configuration: Development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push ${{ matrix.service.name }}
        uses: docker/build-push-action@v6
        with:
          context: src/ServerPulse.Backend
          push: true
          tags: ${{ matrix.service.tag }}
          file: src/ServerPulse.Backend/${{ matrix.service.file }}
          build-args: |
            BUILD_CONFIGURATION=${{ matrix.service.configuration }}

  # docs:
  #   if: ${{ github.ref == 'refs/heads/main' }}
  #   concurrency:
  #     group: "ci-backend-docs"
  #     cancel-in-progress: true
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: ${{ env.DOTNET_VERSION }}

  #     - name: Generate Backend Documentation with DocFX
  #       run: |
  #         dotnet tool update -g docfx
  #         docfx docfx.json
  #       working-directory: docs/backend

  #     - name: Upload Backend Documentation Artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: backend-docs
  #         path: docs/backend/output

  #     - name: Deploy Backend Documentation to External Repository
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         personal_token: ${{ secrets.PERSONAL_DOCS_TOKEN }}
  #         publish_dir: docs/backend/output
  #         external_repository: TEGTO/ServerPulse.Docs.Backend
  #         branch: gh-pages
