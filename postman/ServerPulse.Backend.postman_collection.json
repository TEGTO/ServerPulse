{
	"info": {
		"_postman_id": "65206b03-ac11-4e16-9249-e435c5c6e1db",
		"name": "Server Pulse",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32714822"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "auth-register",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assert that the response status code is either 200 or 400\r",
									"pm.test(\"Register status code is 201 or 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 400]);\r",
									"});\r",
									"\r",
									"// Default to unsuccessful registration\r",
									"pm.environment.set(\"registration_success\", false);\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    pm.environment.set(\"registration_success\", true);\r",
									"} else if (pm.response.code === 400) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    var messages = jsonResponse.messages || [];\r",
									"\r",
									"    var usernameTaken = messages.some(msg => msg.includes(\"Username 'example' is already taken.\"));\r",
									"    var emailTaken = messages.some(msg => msg.includes(\"Email 'example@gmail.com' is already taken.\"));\r",
									"\r",
									"    pm.test(\"Username and Email are both already taken\", function () {\r",
									"        pm.expect(usernameTaken || emailTaken).to.be.true;\r",
									"    });\r",
									"\r",
									"    if (usernameTaken || emailTaken) {\r",
									"        pm.environment.set(\"registration_success\", true);\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"example\",\r\n  \"email\": \"example@gmail.com\",\r\n  \"password\": \"123456QWERTY\",\r\n  \"confirmPassword\": \"123456QWERTY\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/auth/register",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth-login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var registrationSuccess = pm.environment.get(\"registration_success\");\r",
									"if (!registrationSuccess) {\r",
									"     console.error(\"Registration is failed!\")\r",
									"    pm.execution.skipRequest();\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"accessToken\", jsonResponse.authToken.accessToken);\r",
									"    pm.environment.set(\"refreshToken\", jsonResponse.authToken.refreshToken);\r",
									"    pm.environment.set(\"refreshTokenExpiryDate\", jsonResponse.authToken.refreshTokenExpiryDate);\r",
									"    pm.environment.set(\"userName\", jsonResponse.userName);\r",
									"    pm.environment.set(\"email\", jsonResponse.email);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"login\": \"example@gmail.com\",\r\n  \"password\": \"123456QWERTY\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/auth/login",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth-update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7129/auth/update',\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"userName\": \"example\",\r",
									"                \"oldEmail\": \"example1@gmail.com\",\r",
									"                \"newEmail\": \"example@gmail.com\",\r",
									"                \"oldPassword\": \"123456QWERTY\",\r",
									"                \"newPassword\": \"\"\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Update rollback status code is 200\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(200);\r",
									"        });\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userName\": \"example\",\r\n  \"oldEmail\": \"example@gmail.com\",\r\n  \"newEmail\": \"example1@gmail.com\",\r\n  \"oldPassword\": \"123456QWERTY\",\r\n  \"newPassword\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/auth/update",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"auth",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth-refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Refresh status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"accessToken\", jsonResponse.accessToken);\r",
									"    pm.environment.set(\"refreshToken\", jsonResponse.refreshToken);\r",
									"    pm.environment.set(\"refreshTokenExpiryDate\", jsonResponse.refreshTokenExpiryDate);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"accessToken\": \"{{accessToken}}\",\r\n  \"refreshToken\": \"{{refreshToken}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/auth/refresh",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth-check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var jsonResponse = pm.response.json();\r",
									"pm.test(\"Is isCorrect should be true\", function () {\r",
									"    pm.expect(jsonResponse.isCorrect).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"login\": \"example@gmail.com\",\r\n  \"password\": \"123456QWERTY\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/auth/check",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"auth",
								"check"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "server-slot",
			"item": [
				{
					"name": "server-slot-get",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get slot correct data\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverslot",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverslot"
							]
						}
					},
					"response": []
				},
				{
					"name": "server-slot-get-id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get by id status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonResponse = pm.response.json();\r",
									"\r",
									"    var expectedSlotId = pm.environment.get(\"serverslot_id\");\r",
									"    var expectedSloName = pm.environment.get(\"serverslot_name\");\r",
									"    var expectedSlotKey = pm.environment.get(\"serverslot_slotKey\");\r",
									"    var expectedSlotUserEmail = pm.environment.get(\"serverslot_userEmail\");\r",
									"\r",
									"    pm.expect(jsonResponse.id).to.eql(expectedSlotId);\r",
									"    pm.expect(jsonResponse.userEmail).to.eql(expectedSlotUserEmail);\r",
									"    pm.expect(jsonResponse.name).to.eql(expectedSloName);\r",
									"    pm.expect(jsonResponse.slotKey).to.eql(expectedSlotKey);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:7129/serverslot/{{serverslot_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverslot",
								"{{serverslot_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "server-slot-get-string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get slot correct data\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverslot/contains/example",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverslot",
								"contains",
								"example"
							]
						}
					},
					"response": []
				},
				{
					"name": "server-slot-create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create slot status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 201) {\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.environment.set(\"serverslot_id\", jsonResponse.id);\r",
									"    pm.environment.set(\"serverslot_userEmail\", jsonResponse.userEmail);\r",
									"    pm.environment.set(\"serverslot_name\", jsonResponse.name);\r",
									"    pm.environment.set(\"serverslot_slotKey\", jsonResponse.slotKey);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"example123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverslot",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverslot"
							]
						}
					},
					"response": []
				},
				{
					"name": "server-slot-update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Update status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    var token = pm.environment.get(\"accessToken\"); \r",
									"    var serverslotId = pm.environment.get(\"serverslot_id\"); \r",
									"    var serverslotName = pm.environment.get(\"serverslot_name\");\r",
									"    \r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7129/serverslot',\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token \r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"id\": serverslotId,\r",
									"                \"name\": serverslotName,\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Update rollback status code is 200\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(200);\r",
									"        });\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\":\"{{serverslot_id}}\",\r\n    \"name\":\"newName\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverslot",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverslot"
							]
						}
					},
					"response": []
				},
				{
					"name": "server-slot-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Delete status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if (pm.response.code === 200) {\r",
									"    var token = pm.environment.get(\"accessToken\");\r",
									"    var serverslotName = pm.environment.get(\"serverslot_name\");\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: 'https://localhost:7129/serverslot',\r",
									"        method: 'POST',\r",
									"        header: {\r",
									"            'Content-Type': 'application/json',\r",
									"            'Authorization': 'Bearer ' + token\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"name\": serverslotName\r",
									"            })\r",
									"        }\r",
									"    }, function (err, rollbackRes) {\r",
									"        if (err) {\r",
									"            console.error('Delete rollback failed:', err);\r",
									"            return;\r",
									"        }\r",
									"\r",
									"        pm.test(\"Delete rollback status code is 201\", function () {\r",
									"            pm.expect(rollbackRes).to.have.status(201);\r",
									"        });\r",
									"\r",
									"        if (rollbackRes.status === 'Created') {\r",
									"            var jsonResponse = rollbackRes.json();\r",
									"            pm.environment.set(\"serverslot_id\", jsonResponse.id);\r",
									"            pm.environment.set(\"serverslot_userEmail\", jsonResponse.userEmail);\r",
									"            pm.environment.set(\"serverslot_name\", jsonResponse.name);\r",
									"            pm.environment.set(\"serverslot_slotKey\", jsonResponse.slotKey);\r",
									"        }\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverslot/{{serverslot_id}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverslot",
								"{{serverslot_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "server-slot-check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get slot correct data\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonResponse = pm.response.json();\r",
									"\r",
									"    var expectedSlotKey = pm.environment.get(\"serverslot_slotkey\");\r",
									"\r",
									"    pm.expect(jsonResponse.isExisting).to.eql(true);\r",
									"    pm.expect(jsonResponse.slotKey).to.eql(expectedSlotKey);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"SlotKey\":\"{{serverslot_slotKey}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverslot/check",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverslot",
								"check"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "server-interaction",
			"item": [
				{
					"name": "server-interaction-send-configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Send configuration correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Id\":\"someid\",\r\n    \"Key\":\"{{serverslot_slotKey}}\",\r\n    \"CreationDateUTC\":\"2030-09-04T11:51:45.4656254Z\",\r\n    \"ServerKeepAliveInterval\":\"01:00:08\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverinteraction/configuration",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverinteraction",
								"configuration"
							]
						}
					},
					"response": []
				},
				{
					"name": "server-interaction-send-pulse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Send pulse correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Key\":\"{{serverslot_slotKey}}\",\r\n    \"CreationDateUTC\":\"2030-09-04T11:51:45.4656254Z\",\r\n    \"IsAlive\":true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverinteraction/pulse",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverinteraction",
								"pulse"
							]
						}
					},
					"response": []
				},
				{
					"name": "server-interaction-send-load",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Send load correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"Id\": \"someid\",\r\n        \"Key\": \"{{serverslot_slotKey}}\",\r\n        \"CreationDateUTC\": \"2024-08-07T14:30:45.4656254Z\",\r\n        \"Endpoint\": \"/api/v1/resource\",\r\n        \"Method\": \"GET\",\r\n        \"StatusCode\": 200,\r\n        \"Duration\": \"00:00:00.1500000\",\r\n        \"TimestampUTC\": \"2024-08-07T14:30:45.4656254Z\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverinteraction/load",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverinteraction",
								"load"
							]
						}
					},
					"response": []
				},
				{
					"name": "server-interaction-send-custom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Send custom correct\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"CustomEvent\":{\r\n            \"Id\": \"someid\",\r\n            \"Key\": \"{{serverslot_slotKey}}\",\r\n            \"CreationDateUTC\": \"2024-08-07T14:30:45.4656254Z\",\r\n            \"Name\": \"CustomEvent\",\r\n            \"Description\": \"A custom test event, made for testing. Sent from postman.\"\r\n        },\r\n        \"CustomEventSerialized\": \"{\\\"Id\\\":\\\"someid\\\",\\\"Key\\\":\\\"serverslot_slotKey\\\",\\\"CreationDateUTC\\\":\\\"2024-08-07T14:30:45.4656254Z\\\",\\\"Name\\\":\\\"CustomEvent\\\",\\\"Description\\\":\\\"A custom test event, made for testing. Sent from postman.\\\",\\\"AdditionalFields\\\":\\\"Some value\\\",\\\"Number\\\":\\\"SomeNumber\\\"}\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/serverinteraction/custom",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"serverinteraction",
								"custom"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "analyzer",
			"item": [
				{
					"name": "analyzer-load-range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get messages in date range status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Key\":\"{{serverslot_slotKey}}\",\r\n    \"From\":\"2020-08-03T09:45:45.4656254Z\",\r\n    \"To\":\"2044-08-25T09:45:45.4656254Z\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/analyze/daterange",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"analyze",
								"daterange"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyzer-load-some",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get some messages from date status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Key\": \"{{serverslot_slotKey}}\",\r\n    \"NumberOfMessages\" : \"1\",\r\n    \"StartDate\": \"2020-08-14T14:10:45.4656254Z\",\r\n    \"ReadNew\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/analyze/someevents",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"analyze",
								"someevents"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyzer-load-somecustomevents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get some custom messages from date status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.length).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Key\": \"{{serverslot_slotKey}}\",\r\n    \"NumberOfMessages\" : \"1\",\r\n    \"StartDate\": \"2020-08-14T14:10:45.4656254Z\",\r\n    \"ReadNew\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/analyze/somecustomevents",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"analyze",
								"somecustomevents"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyzer-load-amount-amountrange",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get message amount from date status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.length).to.be.above(0);\r",
									"    pm.expect( jsonResponse[0].amountOfEvents).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Key\": \"{{serverslot_slotKey}}\",\r\n    \"From\": \"2020-08-10T13:10:45.4656254Z\",\r\n    \"To\": \"2034-08-10T14:00:45.4656254Z\",\r\n    \"TimeSpan\": \"23:00:00\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/analyze/amountrange",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"analyze",
								"amountrange"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyzer-load-amount-perday",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get message amount per day status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonResponse = pm.response.json();\r",
									"    pm.expect(jsonResponse.length).to.be.above(0);\r",
									"    pm.expect( jsonResponse[0].amountOfEvents).to.be.above(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/analyze/perday/{{serverslot_slotKey}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"analyze",
								"perday",
								"{{serverslot_slotKey}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyzer-eventprocessing-load",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Process load event status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"Id\": \"someid\",\r\n        \"Key\": \"{{serverslot_slotKey}}\",\r\n        \"CreationDateUTC\": \"2024-08-07T14:30:45.4656254Z\",\r\n        \"Endpoint\": \"/api/v1/resource\",\r\n        \"Method\": \"GET\",\r\n        \"StatusCode\": 200,\r\n        \"Duration\": \"00:00:00.1500000\",\r\n        \"TimestampUTC\": \"2024-08-07T14:30:45.4656254Z\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/eventprocessing/load",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"eventprocessing",
								"load"
							]
						}
					},
					"response": []
				},
				{
					"name": "analyzer-load-amount-slotdata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get message amount per day status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:7129/slotdata/{{serverslot_slotKey}}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "7129",
							"path": [
								"slotdata",
								"{{serverslot_slotKey}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "examples",
			"item": [
				{
					"name": "use-case",
					"item": [
						{
							"name": "use-case-get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TODO: Make test"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7132/weatherforecast",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7132",
									"path": [
										"weatherforecast"
									]
								}
							},
							"response": []
						},
						{
							"name": "use-case-get-manual",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//TODO: Make test"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://localhost:7132/weatherforecast/manual",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "7132",
									"path": [
										"weatherforecast",
										"manual"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}